import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from scipy.stats import t
from scipy import stats

st.set_page_config(page_title="Previs√£o da Turbidez da √Ågua", layout="wide")
st.title("üíß Estudo da Turbidez da √Ågua ao Longo do Tempo")
st.markdown("### üßæ Estrutura do Dataset e Classifica√ß√£o das Vari√°veis")

# Mapeamento manual de classifica√ß√£o estat√≠stica
classificacao_variaveis = {
    "data de amostragem": "Qualitativa ordinal",
    "turbidez": "Quantitativa cont√≠nua",
    "periodo": "Qualitativa nominal",
    "ano decimal": "Quantitativa cont√≠nua",
    "s√≥lidos totais": "Quantitativa cont√≠nua",
    'esta√ß√£o': 'Qualitativa nominal'
}

# Criar tabela de classifica√ß√£o
tabela_variaveis = pd.DataFrame({
    "Vari√°vel": list(classificacao_variaveis.keys()),
    "Tipo Estat√≠stico": list(classificacao_variaveis.values())
})

st.dataframe(tabela_variaveis, use_container_width=True)

st.markdown("""
As vari√°veis foram classificadas de acordo com sua natureza estat√≠stica:

- **Qualitativa nominal:** categorias sem ordem definida (ex: per√≠odo).
- **Qualitativa ordinal:** categorias com ordem (ex: tempo).
- **Quantitativa cont√≠nua:** n√∫meros reais que admitem fra√ß√µes (ex: turbidez, ano decimal).
""")


st.markdown("""
### üìò O que √© Turbidez?

A **turbidez** √© uma medida da quantidade de part√≠culas s√≥lidas em suspens√£o na √°gua que afetam sua transpar√™ncia.  
Ela √© normalmente causada por argilas, siltes, mat√©ria org√¢nica, algas ou outros materiais.

- A unidade de medida usada √© **NTU (Unidade Nefelom√©trica de Turbidez)**.
- Segundo a legisla√ß√£o brasileira e padr√µes internacionais, **valores abaixo de 5 NTU** s√£o considerados **excelentes** para √°gua pot√°vel.

---

### üîç Objetivo do Estudo

Este painel analisa dados hist√≥ricos de turbidez da √°gua coletados entre 2019 e 2021.  
Aplicamos uma **regress√£o linear** para prever quando os n√≠veis de turbidez podem voltar a padr√µes **excelentes**.
""")

# === Carregamento dos dados ===
@st.cache_data
def carregar_dados():
    arquivos = {
        "2019": "dados/seriehistorica2019.xlsx",
        "1S2020": "dados/primeirosemestre2020.xlsx",
        "2S2020": "dados/segundosemestre2020.xlsx",
        "2021": "dados/ano2021.xlsx"
    }
    lista_dfs = []

    for nome, caminho in arquivos.items():
        df = pd.read_excel(caminho)
        df.columns = df.columns.str.strip().str.lower()

        colunas_interesse = ['data de amostragem', 'turbidez', 's√≥lidos totais', 'solidos totais','esta√ß√£o']
        colunas_presentes = [col for col in colunas_interesse if col in df.columns]

        if 'data de amostragem' in colunas_presentes:
            dados = df[colunas_presentes].copy()
            dados['data de amostragem'] = pd.to_datetime(dados['data de amostragem'], errors='coerce')
            dados = dados.dropna(subset=['data de amostragem'])
            dados['periodo'] = nome
            lista_dfs.append(dados)

    return pd.concat(lista_dfs, ignore_index=True)



df = carregar_dados()

# Padronizar nome da coluna de s√≥lidos totais
df = df.rename(columns={
    'solidos totais': 's√≥lidos totais'
})


# === Pr√©-processamento ===
df = df.sort_values(by='data de amostragem')
df['ano_decimal'] = df['data de amostragem'].dt.year + (df['data de amostragem'].dt.dayofyear / 365)

# === Regress√£o Linear ===
# Garantir que n√£o h√° NaN em X e y
df_modelo = df[['ano_decimal', 'turbidez']].dropna()
X = df_modelo[['ano_decimal']].values
y = df_modelo['turbidez'].values

modelo = LinearRegression()
modelo.fit(X, y)

# Previs√£o para anos futuros
anos_futuros = np.arange(2019, 2031, 0.1).reshape(-1, 1)
previsoes = modelo.predict(anos_futuros)

# Criar datas reais para eixo X
datas_futuras = pd.to_datetime([f"{int(a)}-01-01" for a in anos_futuros.flatten()])

# === Gr√°fico 1: turbidez + regress√£o ===
st.header("üìä Evolu√ß√£o da Turbidez da √Ågua")
fig = go.Figure()

# Pontos reais
fig.add_trace(go.Scatter(x=df['data de amostragem'], y=df['turbidez'],
                         mode='markers', name='Amostras', marker=dict(color='blue', size=5)))

# Linha de regress√£o
fig.add_trace(go.Scatter(x=datas_futuras, y=previsoes,
                         mode='lines', name='Tend√™ncia (Regress√£o Linear)', line=dict(color='red')))

# Linha padr√£o excelente
fig.add_hline(y=5, line_dash="dash", line_color="green",
              annotation_text="Padr√£o Excelente (5 NTU)", annotation_position="bottom right")

fig.update_layout(title="Turbidez da √Ågua ao Longo do Tempo",
                  xaxis_title="Data", yaxis_title="Turbidez (NTU)",
                  height=500)

st.plotly_chart(fig, use_container_width=True)

# === Previs√£o de retorno √† qualidade excelente ===
ano_excelente = None
for ano, pred in zip(anos_futuros.flatten(), previsoes):
    if pred <= 5:
        ano_excelente = ano
        break

st.subheader("üìà Previs√£o com Base na Tend√™ncia Atual")

if ano_excelente:
    st.success(f"""
    ‚úÖ A an√°lise de regress√£o linear prev√™ que a turbidez pode atingir o padr√£o excelente (**‚â§ 5 NTU**) 
    por volta de **{int(ano_excelente)}**.
    """)
else:
    st.warning("‚ö†Ô∏è A proje√ß√£o atual indica que os n√≠veis de turbidez podem n√£o atingir o padr√£o excelente at√© 2030.")

# === Explica√ß√£o estat√≠stica ===
st.markdown("""
---

### üìê Sobre o M√©todo Estat√≠stico

Utilizamos **regress√£o linear simples**, uma t√©cnica estat√≠stica que busca ajustar uma linha reta aos dados hist√≥ricos, 
assumindo uma rela√ß√£o linear entre o tempo e os valores de turbidez.

Com base nesse modelo, geramos uma proje√ß√£o para os anos seguintes. A ideia √© observar **a tend√™ncia** e estimar quando a turbidez pode cair abaixo do limite ideal.

""")

st.header("üß™ Evolu√ß√£o dos S√≥lidos Totais (STD)")

if 's√≥lidos totais' in df.columns:
    std_data = df[['data de amostragem', 's√≥lidos totais']].dropna()

    fig_std = go.Figure()
    fig_std.add_trace(go.Scatter(
        x=std_data['data de amostragem'],
        y=std_data['s√≥lidos totais'],
        mode='lines+markers',
        name='STD',
        line=dict(color='purple')
    ))

    fig_std.update_layout(
        title="Concentra√ß√£o de S√≥lidos Totais ao Longo do Tempo",
        xaxis_title="Data",
        yaxis_title="Concentra√ß√£o de STD (mg/L)",
        height=500
    )

    st.plotly_chart(fig_std, use_container_width=True)
else:
    st.info("‚ö†Ô∏è Nenhuma informa√ß√£o sobre s√≥lidos totais foi encontrada nos dados carregados.")

# === Filtragem e gr√°fico das esta√ß√µes RD074, RD075, RD009 ===
estacoes_interesse = ['RD074', 'RD075', 'RD009']

st.header("Mapa das esta√ß√µes de coleta")
st.image('assets\download.png')
st.write('Declararemos as esta√ß√µes RD074, RD075 e RD009 como esta√ß√µes de interesse para o nosso estudo, devido a sua proximidade a barragem rompida')

# Filtrar os dados para as esta√ß√µes de interesse e as demais
df_estacoes_interesse = df[df['esta√ß√£o'].isin(estacoes_interesse)]
df_outros = df[~df['esta√ß√£o'].isin(estacoes_interesse)]

# Gr√°fico para comparar s√≥lidos totais nas esta√ß√µes de interesse com as demais
st.header("üìä Compara√ß√£o dos S√≥lidos Totais nas Esta√ß√µes RD074, RD075, RD009 com as Demais")

# Criar o gr√°fico
fig_comparacao = go.Figure()

# Esta√ß√µes de interesse
fig_comparacao.add_trace(go.Box(
    y=df_estacoes_interesse['s√≥lidos totais'],
    x=df_estacoes_interesse['esta√ß√£o'],
    name='Esta√ß√µes de Interesse (RD074, RD075, RD009)',
    boxmean='sd',
    marker=dict(color='orange')
))

# Outras esta√ß√µes
fig_comparacao.add_trace(go.Box(
    y=df_outros['s√≥lidos totais'],
    x=df_outros['esta√ß√£o'],
    name='Outras Esta√ß√µes',
    boxmean='sd',
    marker=dict(color='blue')
))

fig_comparacao.update_layout(
    title="Distribui√ß√£o dos S√≥lidos Totais por Esta√ß√£o",
    xaxis_title="Esta√ß√£o",
    yaxis_title="S√≥lidos Totais (mg/L)",
    height=500
)

st.plotly_chart(fig_comparacao, use_container_width=True)

# === An√°lise estat√≠stica (Intervalos de Confian√ßa e Teste T) ===
# Calcular os intervalos de confian√ßa e o teste t

# Fun√ß√£o para calcular intervalo de confian√ßa para a m√©dia
def intervalo_confianca(data, confidence=0.95):
    n = len(data)
    mean = np.mean(data)
    sem = stats.sem(data)  # Erro padr√£o da m√©dia
    margin_of_error = sem * t.ppf((1 + confidence) / 2., n-1)  # Margem de erro
    return mean - margin_of_error, mean + margin_of_error, mean

# Intervalo de confian√ßa para as esta√ß√µes de interesse
ic_interesse_lower, ic_interesse_upper, mean_interesse = intervalo_confianca(df_estacoes_interesse['s√≥lidos totais'])

# Intervalo de confian√ßa para as outras esta√ß√µes
ic_outros_lower, ic_outros_upper, mean_outros = intervalo_confianca(df_outros['s√≥lidos totais'])

# Exibir intervalos de confian√ßa
st.subheader("üìä Intervalo de Confian√ßa para a M√©dia de S√≥lidos Totais")
st.write(f"**Esta√ß√µes de Interesse (RD074, RD075, RD009):**")
st.write(f"M√©dia: {mean_interesse:.2f} mg/L")
st.write(f"Intervalo de Confian√ßa (95%): ({ic_interesse_lower:.2f}, {ic_interesse_upper:.2f}) mg/L")

st.write(f"**Outras Esta√ß√µes:**")
st.write(f"M√©dia: {mean_outros:.2f} mg/L")
st.write(f"Intervalo de Confian√ßa (95%): ({ic_outros_lower:.2f}, {ic_outros_upper:.2f}) mg/L")

# Teste t para compara√ß√£o de m√©dias
t_stat, p_value = stats.ttest_ind(df_estacoes_interesse['s√≥lidos totais'].dropna(), df_outros['s√≥lidos totais'].dropna())

st.subheader("üî¨ Teste T para Compara√ß√£o de M√©dias")
st.write(f"**Estat√≠stica t:** {t_stat:.2f}")
st.write(f"**Valor p:** {p_value:.4f}")

if p_value < 0.05:
    st.success("üìâ Existe uma diferen√ßa estatisticamente significativa entre os s√≥lidos totais das esta√ß√µes de interesse (RD074, RD075, RD009) e as demais.")
else:
    st.info("üìà N√£o existe uma diferen√ßa estatisticamente significativa entre os s√≥lidos totais das esta√ß√µes de interesse e as demais.")

st.write('Nota-se que, atuando com um intervalo de confian√ßa de 95%, as m√©dias dos s√≥lidos totais presentes nas amostras coletadas pelas esta√ß√µes de interesse ainda s√£o quase metade dos valores compar√°veis coletados nas demais esta√ß√µes.')
st.write('Isso pode evidenciar uma maior preocupa√ß√£o com a remo√ß√£o dos dejetos no local de rompimento da barragem')